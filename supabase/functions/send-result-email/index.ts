import "jsr:@supabase/functions-js/edge-runtime.d.ts";
import { createClient } from "npm:@supabase/supabase-js@2.58.0";

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "POST, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization, X-Client-Info, Apikey",
};

interface EmailRequest {
  studentName: string;
  studentEmail: string;
  schoolName: string;
  documentType: "certificate" | "statement";
  pdfBase64: string;
}

Deno.serve(async (req: Request) => {
  if (req.method === "OPTIONS") {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    });
  }

  try {
    const supabaseUrl = Deno.env.get("SUPABASE_URL")!;
    const supabaseServiceKey = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY")!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    const authHeader = req.headers.get("Authorization");
    let userId: string | null = null;

    if (authHeader) {
      const token = authHeader.replace("Bearer ", "");
      const { data: { user } } = await supabase.auth.getUser(token);
      userId = user?.id || null;
    }

    const { studentName, studentEmail, schoolName, documentType, pdfBase64 }: EmailRequest = await req.json();

    if (!studentEmail || !studentEmail.includes("@")) {
      throw new Error("Invalid email address");
    }

    if (!pdfBase64) {
      throw new Error("PDF content is required");
    }

    const resendApiKey = Deno.env.get("RESEND_API_KEY");

    if (!resendApiKey) {
      const { error: dbError } = await supabase
        .from("email_notifications")
        .insert({
          student_name: studentName,
          student_email: studentEmail,
          document_type: documentType,
          status: "failed",
          error_message: "Email service not configured. Please add RESEND_API_KEY.",
          user_id: userId,
        });

      if (dbError) {
        console.error("Failed to log error:", dbError);
      }

      return new Response(
        JSON.stringify({ 
          error: "Email service not configured. Please add your Resend API key in the edge function secrets." 
        }),
        {
          status: 400,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        }
      );
    }

    const documentTypeName = documentType === "certificate" ? "Certificate" : "Statement of Result";
    const fileName = `${studentName.replace(/\s+/g, "_")}_${documentType}.pdf`;

    const emailPayload = {
      from: "ResultGenie <results@resend.dev>",
      to: [studentEmail],
      subject: `${schoolName || "School"} Academic Result - ${documentTypeName}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
            <h1 style="color: white; margin: 0;">ðŸŽ“ Academic Result</h1>
          </div>
          
          <div style="background: #f9fafb; padding: 30px; border-radius: 0 0 10px 10px;">
            <p style="font-size: 16px; color: #374151; margin-bottom: 20px;">Dear ${studentName},</p>
            
            <p style="font-size: 14px; color: #6b7280; line-height: 1.6;">
              Congratulations! Your academic ${documentTypeName.toLowerCase()} for ${schoolName || "your institution"} is now available.
            </p>
            
            <p style="font-size: 14px; color: #6b7280; line-height: 1.6;">
              Please find your ${documentTypeName.toLowerCase()} attached to this email as a PDF document.
            </p>
            
            <div style="background: white; border-left: 4px solid #667eea; padding: 15px; margin: 20px 0; border-radius: 4px;">
              <p style="margin: 0; font-size: 14px; color: #374151;">
                <strong>Document Type:</strong> ${documentTypeName}<br>
                <strong>Student Name:</strong> ${studentName}
              </p>
            </div>
            
            <p style="font-size: 14px; color: #6b7280; line-height: 1.6;">
              Keep this document safe for your records. If you have any questions, please contact your school administration.
            </p>
            
            <hr style="border: none; border-top: 1px solid #e5e7eb; margin: 30px 0;">
            
            <p style="font-size: 12px; color: #9ca3af; text-align: center;">
              Generated by <strong style="color: #667eea;">ResultGenie</strong> - Modern School Result Management System
            </p>
          </div>
        </div>
      `,
      attachments: [
        {
          filename: fileName,
          content: pdfBase64,
        },
      ],
    };

    const resendResponse = await fetch("https://api.resend.com/emails", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${resendApiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify(emailPayload),
    });

    if (!resendResponse.ok) {
      const errorData = await resendResponse.text();
      console.error("Resend API error:", errorData);
      
      const { error: dbError } = await supabase
        .from("email_notifications")
        .insert({
          student_name: studentName,
          student_email: studentEmail,
          document_type: documentType,
          status: "failed",
          error_message: `Resend API error: ${resendResponse.status}`,
          user_id: userId,
        });

      if (dbError) {
        console.error("Failed to log error:", dbError);
      }

      throw new Error(`Failed to send email: ${resendResponse.status}`);
    }

    const responseData = await resendResponse.json();
    console.log("Email sent successfully:", responseData);

    const { error: dbError } = await supabase
      .from("email_notifications")
      .insert({
        student_name: studentName,
        student_email: studentEmail,
        document_type: documentType,
        status: "sent",
        sent_at: new Date().toISOString(),
        user_id: userId,
      });

    if (dbError) {
      console.error("Failed to log notification:", dbError);
    }

    return new Response(
      JSON.stringify({ 
        success: true,
        emailId: responseData.id,
        message: "Email sent successfully" 
      }),
      {
        status: 200,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );

  } catch (error: any) {
    console.error("Error in send-result-email function:", error);
    return new Response(
      JSON.stringify({ 
        error: error.message || "Failed to send email" 
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
});
